/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MandyView.java
 *
 * Created on May 4, 2011, 9:08:40 PM
 */
package com.lthorup.mandy;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.util.ArrayList;


/**
 *
 * @author Layne
 */
public class MandyView extends javax.swing.JPanel {
    
	static final long serialVersionUID = 1;
	
    final int MAX_ITER = 255;
    final int RES = 800;
    final int NUM_COLORS = 16;
        
    double MSize, MOffX, MOffY, CX, CY;
    boolean modified;
    ArrayList<Frame> frames = new ArrayList<Frame>();
    int currFrame = -1;

    int x1, x2, y1, y2;
    boolean dragging = false;

    private Color[] colors = new Color[NUM_COLORS];

    /** Creates new form MandyView */
    public MandyView() {
        initComponents();

        MSize = 4.0;
        MOffX = MOffY = -2.0;
        CX = CY = 0.0;
        modified = true;

        colors[0] = Color.RED;
        colors[1] = Color.GREEN;
        colors[2] = Color.BLUE;
        colors[3] = Color.YELLOW;
        colors[4] = Color.WHITE;
        colors[5] = Color.PINK;
        colors[6] = Color.MAGENTA;
        colors[7] = Color.CYAN;
        colors[8] = new Color(100,100,255);
        colors[9] = Color.GRAY;
        colors[10] = Color.ORANGE;
        colors[11] = new Color(100,255,100);
        colors[12] = new Color(20,20,180);
        colors[13] = Color.LIGHT_GRAY;
        colors[14] = new Color(255,0,100);
        colors[15] = new Color(50,200,60);
    }
    
    @Override
    public void paint(Graphics g) {
        if (modified)
        {
            Image image = createImage(RES,RES);
            //BufferedImage image = new BufferedImage(RES, RES, BufferedImage.TYPE_INT_RGB);
            Graphics ig = image.getGraphics();
            ig.setColor(Color.BLACK);
            ig.fillRect(0, 0, RES, RES);
            drawMandy(ig, RES, RES, MSize, MSize, MOffX, MOffY);
            frames.add(++currFrame, new Frame(image, MSize, MOffX, MOffY, CX, CY));
            modified = false;
            //try {
            //    ImageIO.write(image, "bmp", new File("mandy.bmp"));
            //}
            //catch(IOException e) {}
        }
        frames.get(currFrame).paint(g, getBounds().width, getBounds().height);
        if (dragging) {
            g.setColor(Color.RED);
            g.drawRect(x1, y1, x2 - x1, y2 - y1);
        }
    }
    
    private void drawMandy(Graphics g, int rx, int ry, double mx, double my, double ox, double oy) {
        double sx = mx / rx;
        double sy = my / ry;

        for (int i = 0; i < rx; i++)
        {
            double x = (i * sx) + ox;
            for (int j = 0; j < ry; j++)
            {
                double y = (j * sy) + oy;
                double pa = 0.0;
                double pb = 0.0;
                for (int cnt = 0; cnt < MAX_ITER; cnt++)
                {
                    double a2 = pa * pa;
                    double b2 = pb * pb;
                    if ((a2 + b2) >= 4.0)
                    {
                        g.setColor(colors[cnt%NUM_COLORS]);
                        g.fillRect(i, j, 1, 1);
                        break;
                    }
                    double na = a2 - b2;
                    double nb = 2.0 * pa * pb;
                    pa = na + x;
                    pb = nb + y;
                }
            }
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            x1 = x2 = evt.getX();
            y1 = y2 = evt.getY();
            dragging = true;
        }
        else
        {
            currFrame--;
            if (currFrame < 0)
                currFrame = frames.size() - 1;
            Frame f = frames.get(currFrame);
            MSize = f.size;
            MOffX = f.offX;
            MOffY = f.offY;
            CX = f.cx;
            CY = f.cy;
            repaint();
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        x2 = evt.getX();
        y2 = evt.getY();
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (dragging)
        {
            int resX = getBounds().width;
            int resY = getBounds().height;
            int left = Math.min(x1, x2);
            if (left < 0) left = 0;
            int right = Math.max(x1, x2);
            if (right >= resX) right = resX - 1;
            int top = Math.min(y1, y2);
            if (top < 0) top = 0;
            int bottom = Math.max(y1, y2);
            if (bottom >= resY) bottom = resY - 1;
            
            if ((left != right) && (top != bottom))
            {
                int selsize = Math.max(right - left, bottom - top);
                int cx = left + ((right - left) / 2);
                int cy = top + ((bottom - top) / 2);
                CX += (cx - (resX / 2)) * (MSize / resX);
                CY += (cy - (resY / 2)) * (MSize / resY);
                MSize *= ((double)selsize / resX);
                MOffX = CX - (MSize / 2.0);
                MOffY = CY - (MSize / 2.0);
                modified = true;
            }
            dragging = false;
            repaint();
        }
    }//GEN-LAST:event_formMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
